// Implementation file for parser generated by fsyacc
module TransPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TransPar.fsy"

open Absyn
let trd (_, _, c) = c

let ll leftie =
  let left = fst leftie
  fst left

let lr leftie =
  let left = fst leftie
  snd left

# 19 "TransPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LOCAL
  | GLOBAL
  | EOF
  | DEL
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | DOT
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | INC
  | DEC
  | ON
  | PRESERVE
  | STRUCT
  | RETURN
  | PRINT
  | CHAR
  | IF
  | ELSE
  | BREAK
  | DO
  | WHILE
  | LOCK
  | UNLOCK
  | FOR
  | IN
  | WAIT
  | WHEN
  | THEN
  | VAR
  | FUN
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTBOOL of (bool)
  | CSTFLOAT of (float)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LOCAL
    | TOKEN_GLOBAL
    | TOKEN_EOF
    | TOKEN_DEL
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_DOT
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_INC
    | TOKEN_DEC
    | TOKEN_ON
    | TOKEN_PRESERVE
    | TOKEN_STRUCT
    | TOKEN_RETURN
    | TOKEN_PRINT
    | TOKEN_CHAR
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_BREAK
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_LOCK
    | TOKEN_UNLOCK
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_WAIT
    | TOKEN_WHEN
    | TOKEN_THEN
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTBOOL
    | TOKEN_CSTFLOAT
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Proximity
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Topdec
    | NONTERM_Fundec
    | NONTERM_Params
    | NONTERM_Params1
    | NONTERM_Block
    | NONTERM_Dec
    | NONTERM_StmtSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_VarAssign
    | NONTERM_StructAssign
    | NONTERM_StmtU
    | NONTERM_ExprSeq
    | NONTERM_Expr
    | NONTERM_Access
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Exprs
    | NONTERM_Exprs1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LOCAL  -> 0 
  | GLOBAL  -> 1 
  | EOF  -> 2 
  | DEL  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | LBRACE  -> 6 
  | RBRACE  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | SEMI  -> 10 
  | COMMA  -> 11 
  | ASSIGN  -> 12 
  | AMP  -> 13 
  | DOT  -> 14 
  | NOT  -> 15 
  | SEQOR  -> 16 
  | SEQAND  -> 17 
  | EQ  -> 18 
  | NE  -> 19 
  | GT  -> 20 
  | LT  -> 21 
  | GE  -> 22 
  | LE  -> 23 
  | PLUS  -> 24 
  | MINUS  -> 25 
  | TIMES  -> 26 
  | DIV  -> 27 
  | MOD  -> 28 
  | INC  -> 29 
  | DEC  -> 30 
  | ON  -> 31 
  | PRESERVE  -> 32 
  | STRUCT  -> 33 
  | RETURN  -> 34 
  | PRINT  -> 35 
  | CHAR  -> 36 
  | IF  -> 37 
  | ELSE  -> 38 
  | BREAK  -> 39 
  | DO  -> 40 
  | WHILE  -> 41 
  | LOCK  -> 42 
  | UNLOCK  -> 43 
  | FOR  -> 44 
  | IN  -> 45 
  | WAIT  -> 46 
  | WHEN  -> 47 
  | THEN  -> 48 
  | VAR  -> 49 
  | FUN  -> 50 
  | CSTSTRING _ -> 51 
  | NAME _ -> 52 
  | CSTBOOL _ -> 53 
  | CSTFLOAT _ -> 54 
  | CSTINT _ -> 55 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LOCAL 
  | 1 -> TOKEN_GLOBAL 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_DEL 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_LBRACE 
  | 7 -> TOKEN_RBRACE 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_SEMI 
  | 11 -> TOKEN_COMMA 
  | 12 -> TOKEN_ASSIGN 
  | 13 -> TOKEN_AMP 
  | 14 -> TOKEN_DOT 
  | 15 -> TOKEN_NOT 
  | 16 -> TOKEN_SEQOR 
  | 17 -> TOKEN_SEQAND 
  | 18 -> TOKEN_EQ 
  | 19 -> TOKEN_NE 
  | 20 -> TOKEN_GT 
  | 21 -> TOKEN_LT 
  | 22 -> TOKEN_GE 
  | 23 -> TOKEN_LE 
  | 24 -> TOKEN_PLUS 
  | 25 -> TOKEN_MINUS 
  | 26 -> TOKEN_TIMES 
  | 27 -> TOKEN_DIV 
  | 28 -> TOKEN_MOD 
  | 29 -> TOKEN_INC 
  | 30 -> TOKEN_DEC 
  | 31 -> TOKEN_ON 
  | 32 -> TOKEN_PRESERVE 
  | 33 -> TOKEN_STRUCT 
  | 34 -> TOKEN_RETURN 
  | 35 -> TOKEN_PRINT 
  | 36 -> TOKEN_CHAR 
  | 37 -> TOKEN_IF 
  | 38 -> TOKEN_ELSE 
  | 39 -> TOKEN_BREAK 
  | 40 -> TOKEN_DO 
  | 41 -> TOKEN_WHILE 
  | 42 -> TOKEN_LOCK 
  | 43 -> TOKEN_UNLOCK 
  | 44 -> TOKEN_FOR 
  | 45 -> TOKEN_IN 
  | 46 -> TOKEN_WAIT 
  | 47 -> TOKEN_WHEN 
  | 48 -> TOKEN_THEN 
  | 49 -> TOKEN_VAR 
  | 50 -> TOKEN_FUN 
  | 51 -> TOKEN_CSTSTRING 
  | 52 -> TOKEN_NAME 
  | 53 -> TOKEN_CSTBOOL 
  | 54 -> TOKEN_CSTFLOAT 
  | 55 -> TOKEN_CSTINT 
  | 58 -> TOKEN_end_of_input
  | 56 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Proximity 
    | 5 -> NONTERM_Proximity 
    | 6 -> NONTERM_Proximity 
    | 7 -> NONTERM_Vardec 
    | 8 -> NONTERM_Vardec 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Topdec 
    | 11 -> NONTERM_Topdec 
    | 12 -> NONTERM_Topdec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Params 
    | 15 -> NONTERM_Params 
    | 16 -> NONTERM_Params1 
    | 17 -> NONTERM_Params1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_Dec 
    | 20 -> NONTERM_StmtSeq 
    | 21 -> NONTERM_StmtSeq 
    | 22 -> NONTERM_StmtSeq 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_Stmt 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_StmtM 
    | 34 -> NONTERM_StmtM 
    | 35 -> NONTERM_StmtM 
    | 36 -> NONTERM_StmtM 
    | 37 -> NONTERM_StmtM 
    | 38 -> NONTERM_StmtM 
    | 39 -> NONTERM_StmtM 
    | 40 -> NONTERM_StmtM 
    | 41 -> NONTERM_StmtM 
    | 42 -> NONTERM_StmtM 
    | 43 -> NONTERM_StmtM 
    | 44 -> NONTERM_StmtM 
    | 45 -> NONTERM_VarAssign 
    | 46 -> NONTERM_StructAssign 
    | 47 -> NONTERM_StmtU 
    | 48 -> NONTERM_StmtU 
    | 49 -> NONTERM_ExprSeq 
    | 50 -> NONTERM_ExprSeq 
    | 51 -> NONTERM_Expr 
    | 52 -> NONTERM_Expr 
    | 53 -> NONTERM_Access 
    | 54 -> NONTERM_Access 
    | 55 -> NONTERM_Access 
    | 56 -> NONTERM_Access 
    | 57 -> NONTERM_Access 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_ExprNotAccess 
    | 65 -> NONTERM_ExprNotAccess 
    | 66 -> NONTERM_ExprNotAccess 
    | 67 -> NONTERM_ExprNotAccess 
    | 68 -> NONTERM_ExprNotAccess 
    | 69 -> NONTERM_ExprNotAccess 
    | 70 -> NONTERM_ExprNotAccess 
    | 71 -> NONTERM_ExprNotAccess 
    | 72 -> NONTERM_ExprNotAccess 
    | 73 -> NONTERM_ExprNotAccess 
    | 74 -> NONTERM_ExprNotAccess 
    | 75 -> NONTERM_ExprNotAccess 
    | 76 -> NONTERM_ExprNotAccess 
    | 77 -> NONTERM_ExprNotAccess 
    | 78 -> NONTERM_ExprNotAccess 
    | 79 -> NONTERM_AtExprNotAccess 
    | 80 -> NONTERM_AtExprNotAccess 
    | 81 -> NONTERM_AtExprNotAccess 
    | 82 -> NONTERM_AtExprNotAccess 
    | 83 -> NONTERM_AtExprNotAccess 
    | 84 -> NONTERM_AtExprNotAccess 
    | 85 -> NONTERM_Exprs 
    | 86 -> NONTERM_Exprs 
    | 87 -> NONTERM_Exprs1 
    | 88 -> NONTERM_Exprs1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 58 
let _fsyacc_tagOfErrorTerminal = 56

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LOCAL  -> "LOCAL" 
  | GLOBAL  -> "GLOBAL" 
  | EOF  -> "EOF" 
  | DEL  -> "DEL" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | DOT  -> "DOT" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | INC  -> "INC" 
  | DEC  -> "DEC" 
  | ON  -> "ON" 
  | PRESERVE  -> "PRESERVE" 
  | STRUCT  -> "STRUCT" 
  | RETURN  -> "RETURN" 
  | PRINT  -> "PRINT" 
  | CHAR  -> "CHAR" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | BREAK  -> "BREAK" 
  | DO  -> "DO" 
  | WHILE  -> "WHILE" 
  | LOCK  -> "LOCK" 
  | UNLOCK  -> "UNLOCK" 
  | FOR  -> "FOR" 
  | IN  -> "IN" 
  | WAIT  -> "WAIT" 
  | WHEN  -> "WHEN" 
  | THEN  -> "THEN" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTBOOL _ -> "CSTBOOL" 
  | CSTFLOAT _ -> "CSTFLOAT" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LOCAL  -> (null : System.Object) 
  | GLOBAL  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | DEL  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | INC  -> (null : System.Object) 
  | DEC  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | PRESERVE  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | LOCK  -> (null : System.Object) 
  | UNLOCK  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | WAIT  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTFLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 8us; 65535us; 0us; 9us; 4us; 9us; 12us; 8us; 13us; 8us; 33us; 8us; 37us; 8us; 40us; 8us; 77us; 8us; 8us; 65535us; 0us; 16us; 4us; 16us; 12us; 14us; 13us; 14us; 33us; 16us; 37us; 16us; 40us; 16us; 77us; 16us; 6us; 65535us; 0us; 19us; 4us; 19us; 33us; 36us; 37us; 36us; 40us; 36us; 77us; 36us; 2us; 65535us; 0us; 4us; 4us; 4us; 2us; 65535us; 0us; 21us; 4us; 21us; 1us; 65535us; 25us; 26us; 2us; 65535us; 25us; 29us; 31us; 32us; 13us; 65535us; 27us; 28us; 33us; 53us; 37us; 53us; 40us; 53us; 48us; 53us; 49us; 53us; 54us; 55us; 64us; 67us; 65us; 66us; 81us; 82us; 88us; 89us; 95us; 96us; 98us; 99us; 4us; 65535us; 33us; 39us; 37us; 39us; 40us; 39us; 77us; 83us; 3us; 65535us; 33us; 34us; 37us; 38us; 40us; 41us; 4us; 65535us; 33us; 37us; 37us; 37us; 40us; 37us; 48us; 124us; 5us; 65535us; 33us; 42us; 37us; 42us; 40us; 42us; 48us; 43us; 49us; 50us; 6us; 65535us; 33us; 109us; 37us; 109us; 40us; 109us; 48us; 109us; 49us; 109us; 86us; 87us; 5us; 65535us; 33us; 111us; 37us; 111us; 40us; 111us; 48us; 111us; 49us; 111us; 5us; 65535us; 33us; 44us; 37us; 44us; 40us; 44us; 48us; 44us; 49us; 123us; 3us; 65535us; 0us; 22us; 4us; 22us; 126us; 127us; 40us; 65535us; 0us; 125us; 4us; 125us; 13us; 169us; 17us; 18us; 33us; 112us; 37us; 112us; 40us; 112us; 46us; 47us; 48us; 112us; 49us; 112us; 57us; 58us; 62us; 63us; 70us; 71us; 84us; 85us; 90us; 91us; 93us; 94us; 97us; 98us; 102us; 103us; 106us; 107us; 116us; 117us; 120us; 121us; 126us; 125us; 138us; 169us; 143us; 144us; 148us; 171us; 155us; 156us; 172us; 157us; 173us; 158us; 174us; 159us; 175us; 160us; 176us; 161us; 177us; 162us; 178us; 163us; 179us; 164us; 180us; 165us; 181us; 166us; 182us; 167us; 183us; 168us; 184us; 170us; 194us; 171us; 43us; 65535us; 0us; 129us; 4us; 129us; 13us; 128us; 17us; 129us; 33us; 129us; 37us; 129us; 40us; 129us; 46us; 129us; 48us; 129us; 49us; 129us; 57us; 129us; 62us; 129us; 70us; 129us; 84us; 129us; 90us; 129us; 93us; 129us; 97us; 129us; 102us; 129us; 106us; 129us; 116us; 129us; 120us; 129us; 126us; 129us; 137us; 139us; 138us; 128us; 143us; 129us; 148us; 129us; 151us; 141us; 153us; 142us; 155us; 129us; 172us; 129us; 173us; 129us; 174us; 129us; 175us; 129us; 176us; 129us; 177us; 129us; 178us; 129us; 179us; 129us; 180us; 129us; 181us; 129us; 182us; 129us; 183us; 129us; 184us; 129us; 194us; 129us; 40us; 65535us; 0us; 130us; 4us; 130us; 13us; 131us; 17us; 130us; 33us; 130us; 37us; 130us; 40us; 130us; 46us; 130us; 48us; 130us; 49us; 130us; 57us; 130us; 62us; 130us; 70us; 130us; 84us; 130us; 90us; 130us; 93us; 130us; 97us; 130us; 102us; 130us; 106us; 130us; 116us; 130us; 120us; 130us; 126us; 130us; 138us; 131us; 143us; 130us; 148us; 130us; 155us; 130us; 172us; 130us; 173us; 130us; 174us; 130us; 175us; 130us; 176us; 130us; 177us; 130us; 178us; 130us; 179us; 130us; 180us; 130us; 181us; 130us; 182us; 130us; 183us; 130us; 184us; 130us; 194us; 130us; 40us; 65535us; 0us; 146us; 4us; 146us; 13us; 147us; 17us; 146us; 33us; 146us; 37us; 146us; 40us; 146us; 46us; 146us; 48us; 146us; 49us; 146us; 57us; 146us; 62us; 146us; 70us; 146us; 84us; 146us; 90us; 146us; 93us; 146us; 97us; 146us; 102us; 146us; 106us; 146us; 116us; 146us; 120us; 146us; 126us; 146us; 138us; 147us; 143us; 146us; 148us; 146us; 155us; 146us; 172us; 146us; 173us; 146us; 174us; 146us; 175us; 146us; 176us; 146us; 177us; 146us; 178us; 146us; 179us; 146us; 180us; 146us; 181us; 146us; 182us; 146us; 183us; 146us; 184us; 146us; 194us; 146us; 1us; 65535us; 148us; 149us; 2us; 65535us; 148us; 193us; 194us; 195us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 15us; 24us; 31us; 34us; 37us; 39us; 42us; 56us; 61us; 65us; 70us; 76us; 83us; 89us; 95us; 99us; 140us; 184us; 225us; 266us; 268us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 5us; 1us; 6us; 1us; 7us; 2us; 7us; 13us; 1us; 7us; 1us; 7us; 1us; 8us; 4us; 8us; 56us; 78us; 84us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 14us; 9us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 3us; 23us; 25us; 47us; 1us; 24us; 3us; 25us; 47us; 48us; 3us; 25us; 47us; 48us; 16us; 25us; 47us; 48us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 3us; 25us; 47us; 48us; 2us; 25us; 47us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 14us; 28us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 28us; 1us; 28us; 2us; 29us; 30us; 2us; 29us; 30us; 15us; 29us; 30us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 2us; 29us; 30us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 14us; 31us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 2us; 33us; 34us; 2us; 33us; 34us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 14us; 34us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 14us; 35us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 35us; 1us; 36us; 14us; 36us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 36us; 1us; 36us; 1us; 37us; 14us; 37us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 37us; 1us; 38us; 1us; 38us; 2us; 39us; 40us; 14us; 39us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 39us; 1us; 40us; 1us; 41us; 14us; 41us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 43us; 14us; 44us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 44us; 1us; 45us; 6us; 45us; 46us; 53us; 54us; 55us; 59us; 1us; 45us; 14us; 45us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 2us; 46us; 53us; 2us; 46us; 53us; 1us; 46us; 14us; 46us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 46us; 1us; 47us; 1us; 48us; 14us; 50us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 50us; 1us; 50us; 5us; 51us; 56us; 57us; 61us; 63us; 4us; 51us; 57us; 61us; 63us; 1us; 52us; 2us; 52us; 78us; 3us; 53us; 54us; 55us; 4us; 53us; 54us; 55us; 59us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 56us; 3us; 56us; 78us; 84us; 2us; 56us; 57us; 1us; 56us; 2us; 57us; 60us; 2us; 57us; 62us; 1us; 57us; 14us; 57us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 1us; 57us; 1us; 58us; 2us; 58us; 84us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 70us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 76us; 77us; 13us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 14us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 77us; 15us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 87us; 88us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 79us; 1us; 80us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 83us; 1us; 84us; 1us; 86us; 1us; 88us; 1us; 88us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 21us; 23us; 25us; 27us; 32us; 34us; 36us; 38us; 40us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 108us; 110us; 114us; 118us; 135us; 139us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 173us; 175us; 177us; 180us; 183us; 199us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 229us; 231us; 233us; 235us; 237us; 240us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 272us; 274us; 276us; 278us; 280us; 282us; 297us; 299us; 301us; 316us; 318us; 320us; 322us; 337us; 339us; 341us; 343us; 346us; 361us; 363us; 365us; 367us; 382us; 384us; 386us; 388us; 390us; 405us; 407us; 409us; 416us; 418us; 433us; 436us; 439us; 441us; 456us; 458us; 460us; 462us; 477us; 479us; 481us; 487us; 492us; 494us; 497us; 501us; 506us; 508us; 510us; 512us; 514us; 518us; 521us; 523us; 526us; 529us; 531us; 546us; 548us; 550us; 553us; 555us; 557us; 559us; 561us; 563us; 565us; 567us; 569us; 584us; 599us; 614us; 629us; 644us; 659us; 674us; 689us; 704us; 719us; 734us; 749us; 764us; 778us; 793us; 809us; 811us; 813us; 815us; 817us; 819us; 821us; 823us; 825us; 827us; 829us; 831us; 833us; 835us; 837us; 839us; 841us; 843us; 845us; 847us; 849us; 851us; 853us; 855us; |]
let _fsyacc_action_rows = 196
let _fsyacc_actionTableElements = [|14us; 16386us; 0us; 6us; 1us; 7us; 4us; 13us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 49us; 16388us; 50us; 16388us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 49152us; 1us; 32768us; 2us; 3us; 0us; 16385us; 14us; 16386us; 0us; 6us; 1us; 7us; 4us; 13us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 49us; 16388us; 50us; 16388us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 16387us; 0us; 16389us; 0us; 16390us; 1us; 32768us; 49us; 10us; 2us; 32768us; 49us; 10us; 50us; 23us; 1us; 32768us; 52us; 11us; 0us; 16391us; 3us; 16388us; 0us; 6us; 1us; 7us; 4us; 12us; 12us; 16388us; 0us; 6us; 1us; 7us; 4us; 13us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 1us; 32768us; 5us; 15us; 0us; 16392us; 1us; 32768us; 12us; 17us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 13us; 16393us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 1us; 32768us; 10us; 20us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 52us; 24us; 1us; 32768us; 4us; 25us; 1us; 16398us; 52us; 30us; 1us; 32768us; 5us; 27us; 1us; 32768us; 6us; 33us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 11us; 31us; 1us; 32768us; 52us; 30us; 0us; 16401us; 27us; 16388us; 0us; 6us; 1us; 7us; 4us; 13us; 6us; 33us; 7us; 16404us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 31us; 97us; 32us; 100us; 34us; 102us; 35us; 106us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 68us; 43us; 73us; 44us; 76us; 46us; 90us; 47us; 93us; 51us; 191us; 52us; 115us; 53us; 190us; 54us; 189us; 55us; 186us; 1us; 32768us; 7us; 35us; 0us; 16402us; 0us; 16403us; 27us; 16388us; 0us; 6us; 1us; 7us; 4us; 13us; 6us; 33us; 7us; 16404us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 31us; 97us; 32us; 100us; 34us; 102us; 35us; 106us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 68us; 43us; 73us; 44us; 76us; 46us; 90us; 47us; 93us; 51us; 191us; 52us; 115us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 16405us; 1us; 32768us; 10us; 40us; 27us; 16388us; 0us; 6us; 1us; 7us; 4us; 13us; 6us; 33us; 7us; 16404us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 31us; 97us; 32us; 100us; 34us; 102us; 35us; 106us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 68us; 43us; 73us; 44us; 76us; 46us; 90us; 47us; 93us; 51us; 191us; 52us; 115us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 16406us; 0us; 16407us; 1us; 16407us; 38us; 49us; 0us; 16408us; 1us; 32768us; 4us; 46us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 5us; 48us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 24us; 32768us; 4us; 138us; 6us; 33us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 31us; 97us; 32us; 100us; 34us; 102us; 35us; 106us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 68us; 43us; 73us; 44us; 76us; 46us; 90us; 47us; 93us; 51us; 191us; 52us; 115us; 53us; 190us; 54us; 189us; 55us; 186us; 24us; 32768us; 4us; 138us; 6us; 33us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 31us; 97us; 32us; 100us; 34us; 102us; 35us; 106us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 68us; 43us; 73us; 44us; 76us; 46us; 90us; 47us; 93us; 51us; 191us; 52us; 115us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 16409us; 1us; 32768us; 10us; 52us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 6us; 33us; 1us; 32768us; 41us; 56us; 1us; 32768us; 4us; 57us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 5us; 59us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 1us; 32768us; 10us; 60us; 0us; 16412us; 1us; 32768us; 4us; 62us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 5us; 64us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 2us; 32768us; 6us; 33us; 40us; 65us; 1us; 32768us; 6us; 33us; 0us; 16413us; 0us; 16414us; 1us; 32768us; 52us; 69us; 1us; 32768us; 12us; 70us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 10us; 72us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16415us; 1us; 32768us; 52us; 74us; 1us; 32768us; 10us; 75us; 0us; 16416us; 1us; 32768us; 4us; 77us; 4us; 16388us; 0us; 6us; 1us; 7us; 4us; 12us; 52us; 78us; 1us; 32768us; 45us; 79us; 1us; 32768us; 52us; 80us; 1us; 32768us; 5us; 81us; 1us; 32768us; 6us; 33us; 0us; 16417us; 1us; 32768us; 10us; 84us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 10us; 86us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 1us; 32768us; 52us; 114us; 1us; 32768us; 5us; 88us; 1us; 32768us; 6us; 33us; 0us; 16418us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 10us; 92us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16419us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 48us; 95us; 1us; 32768us; 6us; 33us; 0us; 16420us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 6us; 33us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16421us; 1us; 32768us; 10us; 101us; 0us; 16422us; 11us; 32768us; 4us; 138us; 10us; 105us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 10us; 104us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16423us; 0us; 16424us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 10us; 108us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16425us; 1us; 32768us; 10us; 110us; 0us; 16426us; 0us; 16427us; 14us; 32768us; 10us; 113us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16428us; 1us; 32768us; 12us; 116us; 4us; 16439us; 3us; 136us; 4us; 148us; 12us; 116us; 14us; 118us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 13us; 16429us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 1us; 32768us; 52us; 119us; 1us; 16437us; 12us; 120us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 10us; 122us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 14us; 32768us; 10us; 126us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 10us; 16433us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 16434us; 4us; 16435us; 5us; 140us; 8us; 143us; 29us; 152us; 30us; 154us; 3us; 16435us; 8us; 143us; 29us; 152us; 30us; 154us; 0us; 16436us; 1us; 16436us; 5us; 185us; 2us; 16439us; 3us; 136us; 14us; 134us; 3us; 16439us; 3us; 136us; 4us; 148us; 14us; 134us; 1us; 32768us; 52us; 135us; 0us; 16437us; 0us; 16438us; 2us; 32768us; 4us; 137us; 52us; 132us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 2us; 32768us; 5us; 140us; 8us; 143us; 0us; 16440us; 1us; 16444us; 8us; 143us; 1us; 16446us; 8us; 143us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 14us; 32768us; 9us; 145us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16441us; 0us; 16442us; 1us; 16442us; 5us; 192us; 10us; 16469us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 1us; 32768us; 5us; 150us; 0us; 16443us; 2us; 32768us; 4us; 137us; 52us; 132us; 0us; 16445us; 2us; 32768us; 4us; 137us; 52us; 132us; 0us; 16447us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 16448us; 3us; 16449us; 26us; 174us; 27us; 175us; 28us; 176us; 3us; 16450us; 26us; 174us; 27us; 175us; 28us; 176us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 9us; 16454us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 9us; 16455us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 9us; 16456us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 9us; 16457us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 9us; 16458us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 9us; 16459us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 11us; 16460us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 13us; 32768us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 12us; 16461us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 14us; 16471us; 11us; 194us; 16us; 184us; 17us; 183us; 18us; 177us; 19us; 178us; 20us; 179us; 21us; 180us; 22us; 181us; 23us; 182us; 24us; 172us; 25us; 173us; 26us; 174us; 27us; 175us; 28us; 176us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 16462us; 0us; 16463us; 1us; 32768us; 55us; 188us; 0us; 16464us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 0us; 16468us; 0us; 16470us; 10us; 32768us; 4us; 138us; 15us; 155us; 25us; 187us; 29us; 151us; 30us; 153us; 51us; 191us; 52us; 133us; 53us; 190us; 54us; 189us; 55us; 186us; 0us; 16472us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 15us; 16us; 18us; 19us; 34us; 35us; 36us; 37us; 39us; 42us; 44us; 45us; 49us; 62us; 64us; 65us; 67us; 78us; 92us; 94us; 95us; 96us; 97us; 99us; 101us; 103us; 105us; 107us; 108us; 109us; 111us; 113us; 114us; 142us; 144us; 145us; 146us; 174us; 175us; 177us; 205us; 206us; 207us; 209us; 210us; 212us; 223us; 238us; 263us; 288us; 289us; 291us; 292us; 293us; 295us; 297us; 299us; 310us; 325us; 327us; 328us; 330us; 341us; 356us; 359us; 361us; 362us; 363us; 365us; 367us; 378us; 393us; 394us; 396us; 398us; 399us; 401us; 406us; 408us; 410us; 412us; 414us; 415us; 417us; 428us; 443us; 445us; 447us; 449us; 450us; 461us; 476us; 477us; 488us; 503us; 505us; 506us; 517us; 532us; 533us; 535us; 536us; 548us; 563us; 564us; 565us; 576us; 591us; 592us; 594us; 595us; 596us; 611us; 612us; 614us; 619us; 630us; 644us; 646us; 648us; 659us; 674us; 675us; 676us; 677us; 692us; 703us; 704us; 709us; 713us; 714us; 716us; 719us; 723us; 725us; 726us; 727us; 730us; 741us; 744us; 745us; 747us; 749us; 760us; 775us; 776us; 777us; 779us; 790us; 792us; 793us; 796us; 797us; 800us; 801us; 812us; 813us; 817us; 821us; 822us; 823us; 824us; 834us; 844us; 854us; 864us; 874us; 884us; 896us; 910us; 923us; 938us; 949us; 960us; 971us; 982us; 993us; 1004us; 1015us; 1026us; 1037us; 1048us; 1059us; 1070us; 1081us; 1082us; 1083us; 1085us; 1086us; 1087us; 1088us; 1089us; 1090us; 1091us; 1102us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 0us; 1us; 1us; 3us; 3us; 3us; 2us; 1us; 1us; 7us; 0us; 1us; 1us; 3us; 3us; 1us; 0us; 2us; 3us; 1us; 1us; 7us; 2us; 1us; 7us; 6us; 5us; 5us; 3us; 7us; 9us; 3us; 4us; 3us; 2us; 3us; 2us; 3us; 2us; 1us; 2us; 3us; 6us; 7us; 5us; 0us; 3us; 1us; 1us; 3us; 2us; 1us; 3us; 4us; 1us; 4us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 2us; 1us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 6us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 24us; 24us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 16389us; 16390us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 16394us; 16395us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 16403us; 65535us; 16405us; 65535us; 65535us; 16406us; 16407us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 16414us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 16421us; 65535us; 16422us; 65535us; 65535us; 16423us; 16424us; 65535us; 65535us; 16425us; 65535us; 16426us; 16427us; 65535us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 16431us; 16432us; 65535us; 65535us; 16434us; 65535us; 65535us; 16436us; 65535us; 65535us; 65535us; 65535us; 16437us; 16438us; 65535us; 65535us; 65535us; 16440us; 65535us; 65535us; 65535us; 65535us; 16441us; 16442us; 65535us; 65535us; 65535us; 16443us; 65535us; 16445us; 65535us; 16447us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16462us; 16463us; 65535us; 16464us; 16465us; 16466us; 16467us; 16468us; 16470us; 65535us; 16472us; |]
let _fsyacc_reductions ()  =    [| 
# 516 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 525 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "TransPar.fsy"
                                                                       Prog _1 
                   )
# 47 "TransPar.fsy"
                 : Absyn.program));
# 536 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "TransPar.fsy"
                                                                 [] 
                   )
# 51 "TransPar.fsy"
                 : 'Topdecs));
# 546 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "TransPar.fsy"
                                                                 _1 :: _2 
                   )
# 52 "TransPar.fsy"
                 : 'Topdecs));
# 558 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "TransPar.fsy"
                                                                       Local 
                   )
# 56 "TransPar.fsy"
                 : 'Proximity));
# 568 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "TransPar.fsy"
                                                                       Local 
                   )
# 57 "TransPar.fsy"
                 : 'Proximity));
# 578 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "TransPar.fsy"
                                                                       Global 
                   )
# 58 "TransPar.fsy"
                 : 'Proximity));
# 588 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Proximity)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "TransPar.fsy"
                                                                       (_1, _3) 
                   )
# 62 "TransPar.fsy"
                 : 'Vardec));
# 600 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "TransPar.fsy"
                                                                       _2 
                   )
# 63 "TransPar.fsy"
                 : 'Vardec));
# 611 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "TransPar.fsy"
                                                                       (_1,_3) 
                   )
# 67 "TransPar.fsy"
                 : 'Vardesc));
# 623 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "TransPar.fsy"
                                                                       Vardec (ll _1, lr _1, snd _1) 
                   )
# 71 "TransPar.fsy"
                 : 'Topdec));
# 634 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "TransPar.fsy"
                                                               _1 
                   )
# 72 "TransPar.fsy"
                 : 'Topdec));
# 645 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "TransPar.fsy"
                                                                       ExprSeq(_1) 
                   )
# 73 "TransPar.fsy"
                 : 'Topdec));
# 656 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Proximity)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "TransPar.fsy"
                                                                       Fundec(_1,_3,_5,_7) 
                   )
# 77 "TransPar.fsy"
                 : 'Fundec));
# 670 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "TransPar.fsy"
                                                                  [] 
                   )
# 81 "TransPar.fsy"
                 : 'Params));
# 680 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "TransPar.fsy"
                                                                _1 
                   )
# 82 "TransPar.fsy"
                 : 'Params));
# 691 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "TransPar.fsy"
                                                               [_1] 
                   )
# 86 "TransPar.fsy"
                 : 'Params1));
# 702 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "TransPar.fsy"
                                                                  _1 :: _3 
                   )
# 87 "TransPar.fsy"
                 : 'Params1));
# 714 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "TransPar.fsy"
                                                                     Block _2 
                   )
# 91 "TransPar.fsy"
                 : 'Block));
# 725 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "TransPar.fsy"
                                                                       Dec(ll _1, lr _1, snd _1) 
                   )
# 95 "TransPar.fsy"
                 : 'Dec));
# 736 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "TransPar.fsy"
                                                                  [] 
                   )
# 99 "TransPar.fsy"
                 : 'StmtSeq));
# 746 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "TransPar.fsy"
                                                                 Stmt _1 :: _2 
                   )
# 100 "TransPar.fsy"
                 : 'StmtSeq));
# 758 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "TransPar.fsy"
                                                                       (_1)::_3 
                   )
# 101 "TransPar.fsy"
                 : 'StmtSeq));
# 770 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "TransPar.fsy"
                                                                       _1 
                   )
# 105 "TransPar.fsy"
                 : 'Stmt));
# 781 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "TransPar.fsy"
                                                                       _1 
                   )
# 106 "TransPar.fsy"
                 : 'Stmt));
# 792 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "TransPar.fsy"
                                                                       If(_3, _5, _7) 
                   )
# 110 "TransPar.fsy"
                 : 'StmtM));
# 805 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "TransPar.fsy"
                                                                Break 
                   )
# 111 "TransPar.fsy"
                 : 'StmtM));
# 815 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "TransPar.fsy"
                                                                _1 
                   )
# 112 "TransPar.fsy"
                 : 'StmtM));
# 826 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "TransPar.fsy"
                                                                       DoWhile(_2, _5) 
                   )
# 113 "TransPar.fsy"
                 : 'StmtM));
# 838 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "TransPar.fsy"
                                                                   While(_3, _6) 
                   )
# 114 "TransPar.fsy"
                 : 'StmtM));
# 850 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "TransPar.fsy"
                                                                  While(_3, _5) 
                   )
# 115 "TransPar.fsy"
                 : 'StmtM));
# 862 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "TransPar.fsy"
                                                                    Lock(_2, _4) 
                   )
# 116 "TransPar.fsy"
                 : 'StmtM));
# 874 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "TransPar.fsy"
                                                                  Unlock(_2) 
                   )
# 117 "TransPar.fsy"
                 : 'StmtM));
# 885 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "TransPar.fsy"
                                                                      ForIn(_3, _5, _7) 
                   )
# 118 "TransPar.fsy"
                 : 'StmtM));
# 898 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dec)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarAssign)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "TransPar.fsy"
                                                                            For(_3, _5, _7, _9) 
                   )
# 119 "TransPar.fsy"
                 : 'StmtM));
# 912 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "TransPar.fsy"
                                                                 Wait(_2) 
                   )
# 120 "TransPar.fsy"
                 : 'StmtM));
# 923 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "TransPar.fsy"
                                                                   WhenThen(_2, _4) 
                   )
# 121 "TransPar.fsy"
                 : 'StmtM));
# 935 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "TransPar.fsy"
                                                                  On(_2, _3) 
                   )
# 122 "TransPar.fsy"
                 : 'StmtM));
# 947 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "TransPar.fsy"
                                                                  Preserve 
                   )
# 123 "TransPar.fsy"
                 : 'StmtM));
# 957 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "TransPar.fsy"
                                                                  Return(Some(_2)) 
                   )
# 124 "TransPar.fsy"
                 : 'StmtM));
# 968 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "TransPar.fsy"
                                                                 Return None 
                   )
# 125 "TransPar.fsy"
                 : 'StmtM));
# 978 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "TransPar.fsy"
                                                                  Print _2 
                   )
# 126 "TransPar.fsy"
                 : 'StmtM));
# 989 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarAssign)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "TransPar.fsy"
                                                                   _1 
                   )
# 127 "TransPar.fsy"
                 : 'StmtM));
# 1000 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StructAssign)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "TransPar.fsy"
                                                                       _1 
                   )
# 128 "TransPar.fsy"
                 : 'StmtM));
# 1011 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "TransPar.fsy"
                                                                 Expr(_1) 
                   )
# 129 "TransPar.fsy"
                 : 'StmtM));
# 1022 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "TransPar.fsy"
                                                                       AssignVar(_1, _3) 
                   )
# 133 "TransPar.fsy"
                 : 'VarAssign));
# 1034 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "TransPar.fsy"
                                                                       AssignMember(_1, _3, _5) 
                   )
# 137 "TransPar.fsy"
                 : 'StructAssign));
# 1047 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "TransPar.fsy"
                                                                       If(_3, _5, _7) 
                   )
# 141 "TransPar.fsy"
                 : 'StmtU));
# 1060 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "TransPar.fsy"
                                                                    If(_3, _5, Block []) 
                   )
# 142 "TransPar.fsy"
                 : 'StmtU));
# 1072 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "TransPar.fsy"
                                                                       [] 
                   )
# 146 "TransPar.fsy"
                 : 'ExprSeq));
# 1082 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "TransPar.fsy"
                                                                       _1::_3 
                   )
# 147 "TransPar.fsy"
                 : 'ExprSeq));
# 1094 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "TransPar.fsy"
                                                                Access(_1) 
                   )
# 151 "TransPar.fsy"
                 : 'Expr));
# 1105 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "TransPar.fsy"
                                                                   _1 
                   )
# 152 "TransPar.fsy"
                 : 'Expr));
# 1116 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "TransPar.fsy"
                                                                   AccMem(_1, _3) 
                   )
# 156 "TransPar.fsy"
                 : 'Access));
# 1128 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "TransPar.fsy"
                                                                 AccFun(_1) 
                   )
# 157 "TransPar.fsy"
                 : 'Access));
# 1139 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "TransPar.fsy"
                                                                      AccVar(_1) 
                   )
# 158 "TransPar.fsy"
                 : 'Access));
# 1150 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "TransPar.fsy"
                                                                       _2 
                   )
# 159 "TransPar.fsy"
                 : 'Access));
# 1161 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "TransPar.fsy"
                                                                   AccIndex(_1, _3) 
                   )
# 160 "TransPar.fsy"
                 : 'Access));
# 1173 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "TransPar.fsy"
                                                                       _1 
                   )
# 164 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1184 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "TransPar.fsy"
                                                                       Call(_1, _3) 
                   )
# 165 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1196 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "TransPar.fsy"
                                                                       PreInc(_2) 
                   )
# 166 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1207 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "TransPar.fsy"
                                                                       PostInc(_1) 
                   )
# 167 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1218 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "TransPar.fsy"
                                                                       PreDec(_2) 
                   )
# 168 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1229 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "TransPar.fsy"
                                                                       PostDec(_1) 
                   )
# 169 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1240 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "TransPar.fsy"
                                                                       Prim1("!", _2) 
                   )
# 170 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1251 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "TransPar.fsy"
                                                                       Prim2("+",  _1, _3) 
                   )
# 171 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1263 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "TransPar.fsy"
                                                                       Prim2("-",  _1, _3) 
                   )
# 172 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1275 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "TransPar.fsy"
                                                                       Prim2("*",  _1, _3) 
                   )
# 173 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1287 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "TransPar.fsy"
                                                                       Prim2("/",  _1, _3) 
                   )
# 174 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1299 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "TransPar.fsy"
                                                                       Prim2("%",  _1, _3) 
                   )
# 175 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1311 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "TransPar.fsy"
                                                                       Prim2("==", _1, _3) 
                   )
# 176 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1323 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "TransPar.fsy"
                                                                       Prim2("!=", _1, _3) 
                   )
# 177 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1335 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "TransPar.fsy"
                                                                       Prim2(">",  _1, _3) 
                   )
# 178 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1347 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "TransPar.fsy"
                                                                       Prim2("<",  _1, _3) 
                   )
# 179 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1359 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "TransPar.fsy"
                                                                       Prim2(">=", _1, _3) 
                   )
# 180 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1371 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "TransPar.fsy"
                                                                       Prim2("<=", _1, _3) 
                   )
# 181 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1383 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "TransPar.fsy"
                                                                       Andalso(_1, _3)     
                   )
# 182 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1395 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "TransPar.fsy"
                                                                       Orelse(_1, _3)      
                   )
# 183 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1407 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "TransPar.fsy"
                                                                       _2 
                   )
# 184 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1418 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "TransPar.fsy"
                                                                       CstN(float _1) 
                   )
# 188 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1429 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "TransPar.fsy"
                                                                       CstN(float (-_2)) 
                   )
# 189 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1440 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "TransPar.fsy"
                                                                       CstN(_1) 
                   )
# 190 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1451 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "TransPar.fsy"
                                                                       CstB(_1) 
                   )
# 191 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1462 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "TransPar.fsy"
                                                                       CstS(_1) 
                   )
# 192 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1473 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "TransPar.fsy"
                                                                       _2 
                   )
# 193 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1484 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "TransPar.fsy"
                                                                       []       
                   )
# 197 "TransPar.fsy"
                 : 'Exprs));
# 1494 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "TransPar.fsy"
                                                                       _1       
                   )
# 198 "TransPar.fsy"
                 : 'Exprs));
# 1505 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "TransPar.fsy"
                                                                       [_1]     
                   )
# 202 "TransPar.fsy"
                 : 'Exprs1));
# 1516 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "TransPar.fsy"
                                                                       _1 :: _3 
                   )
# 203 "TransPar.fsy"
                 : 'Exprs1));
|]
# 1529 "TransPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 59;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
