// Implementation file for parser generated by fsyacc
module TransPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TransPar.fsy"

open Absyn
let trd (_, _, c) = c

let ll leftie =
  let left = fst leftie
  fst left

let lr leftie =
  let left = fst leftie
  snd left

# 19 "TransPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LOCAL
  | GLOBAL
  | EOF
  | DEL
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | DOT
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | INC
  | DEC
  | ON
  | PRESERVE
  | STRUCT
  | RETURN
  | PRINT
  | CHAR
  | IF
  | ELSE
  | BREAK
  | DO
  | WHILE
  | LOCK
  | UNLOCK
  | FOR
  | IN
  | WAIT
  | WHEN
  | THEN
  | VAR
  | FUN
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTBOOL of (bool)
  | CSTFLOAT of (float)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LOCAL
    | TOKEN_GLOBAL
    | TOKEN_EOF
    | TOKEN_DEL
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_DOT
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_INC
    | TOKEN_DEC
    | TOKEN_ON
    | TOKEN_PRESERVE
    | TOKEN_STRUCT
    | TOKEN_RETURN
    | TOKEN_PRINT
    | TOKEN_CHAR
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_BREAK
    | TOKEN_DO
    | TOKEN_WHILE
    | TOKEN_LOCK
    | TOKEN_UNLOCK
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_WAIT
    | TOKEN_WHEN
    | TOKEN_THEN
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTBOOL
    | TOKEN_CSTFLOAT
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Proximity
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Topdec
    | NONTERM_Fundec
    | NONTERM_Params
    | NONTERM_Params1
    | NONTERM_Block
    | NONTERM_Dec
    | NONTERM_StmtSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_VarAssign
    | NONTERM_StructAssign
    | NONTERM_StmtU
    | NONTERM_ExprSeq
    | NONTERM_Expr
    | NONTERM_Access
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Exprs
    | NONTERM_Exprs1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LOCAL  -> 0 
  | GLOBAL  -> 1 
  | EOF  -> 2 
  | DEL  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | LBRACE  -> 6 
  | RBRACE  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | SEMI  -> 10 
  | COMMA  -> 11 
  | ASSIGN  -> 12 
  | AMP  -> 13 
  | DOT  -> 14 
  | NOT  -> 15 
  | SEQOR  -> 16 
  | SEQAND  -> 17 
  | EQ  -> 18 
  | NE  -> 19 
  | GT  -> 20 
  | LT  -> 21 
  | GE  -> 22 
  | LE  -> 23 
  | PLUS  -> 24 
  | MINUS  -> 25 
  | TIMES  -> 26 
  | DIV  -> 27 
  | MOD  -> 28 
  | INC  -> 29 
  | DEC  -> 30 
  | ON  -> 31 
  | PRESERVE  -> 32 
  | STRUCT  -> 33 
  | RETURN  -> 34 
  | PRINT  -> 35 
  | CHAR  -> 36 
  | IF  -> 37 
  | ELSE  -> 38 
  | BREAK  -> 39 
  | DO  -> 40 
  | WHILE  -> 41 
  | LOCK  -> 42 
  | UNLOCK  -> 43 
  | FOR  -> 44 
  | IN  -> 45 
  | WAIT  -> 46 
  | WHEN  -> 47 
  | THEN  -> 48 
  | VAR  -> 49 
  | FUN  -> 50 
  | CSTSTRING _ -> 51 
  | NAME _ -> 52 
  | CSTBOOL _ -> 53 
  | CSTFLOAT _ -> 54 
  | CSTINT _ -> 55 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LOCAL 
  | 1 -> TOKEN_GLOBAL 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_DEL 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_LBRACE 
  | 7 -> TOKEN_RBRACE 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_SEMI 
  | 11 -> TOKEN_COMMA 
  | 12 -> TOKEN_ASSIGN 
  | 13 -> TOKEN_AMP 
  | 14 -> TOKEN_DOT 
  | 15 -> TOKEN_NOT 
  | 16 -> TOKEN_SEQOR 
  | 17 -> TOKEN_SEQAND 
  | 18 -> TOKEN_EQ 
  | 19 -> TOKEN_NE 
  | 20 -> TOKEN_GT 
  | 21 -> TOKEN_LT 
  | 22 -> TOKEN_GE 
  | 23 -> TOKEN_LE 
  | 24 -> TOKEN_PLUS 
  | 25 -> TOKEN_MINUS 
  | 26 -> TOKEN_TIMES 
  | 27 -> TOKEN_DIV 
  | 28 -> TOKEN_MOD 
  | 29 -> TOKEN_INC 
  | 30 -> TOKEN_DEC 
  | 31 -> TOKEN_ON 
  | 32 -> TOKEN_PRESERVE 
  | 33 -> TOKEN_STRUCT 
  | 34 -> TOKEN_RETURN 
  | 35 -> TOKEN_PRINT 
  | 36 -> TOKEN_CHAR 
  | 37 -> TOKEN_IF 
  | 38 -> TOKEN_ELSE 
  | 39 -> TOKEN_BREAK 
  | 40 -> TOKEN_DO 
  | 41 -> TOKEN_WHILE 
  | 42 -> TOKEN_LOCK 
  | 43 -> TOKEN_UNLOCK 
  | 44 -> TOKEN_FOR 
  | 45 -> TOKEN_IN 
  | 46 -> TOKEN_WAIT 
  | 47 -> TOKEN_WHEN 
  | 48 -> TOKEN_THEN 
  | 49 -> TOKEN_VAR 
  | 50 -> TOKEN_FUN 
  | 51 -> TOKEN_CSTSTRING 
  | 52 -> TOKEN_NAME 
  | 53 -> TOKEN_CSTBOOL 
  | 54 -> TOKEN_CSTFLOAT 
  | 55 -> TOKEN_CSTINT 
  | 58 -> TOKEN_end_of_input
  | 56 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Proximity 
    | 5 -> NONTERM_Proximity 
    | 6 -> NONTERM_Proximity 
    | 7 -> NONTERM_Vardec 
    | 8 -> NONTERM_Vardec 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Topdec 
    | 11 -> NONTERM_Topdec 
    | 12 -> NONTERM_Topdec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Params 
    | 15 -> NONTERM_Params 
    | 16 -> NONTERM_Params1 
    | 17 -> NONTERM_Params1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_Dec 
    | 20 -> NONTERM_StmtSeq 
    | 21 -> NONTERM_StmtSeq 
    | 22 -> NONTERM_StmtSeq 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_Stmt 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_StmtM 
    | 34 -> NONTERM_StmtM 
    | 35 -> NONTERM_StmtM 
    | 36 -> NONTERM_StmtM 
    | 37 -> NONTERM_StmtM 
    | 38 -> NONTERM_StmtM 
    | 39 -> NONTERM_StmtM 
    | 40 -> NONTERM_StmtM 
    | 41 -> NONTERM_StmtM 
    | 42 -> NONTERM_StmtM 
    | 43 -> NONTERM_StmtM 
    | 44 -> NONTERM_VarAssign 
    | 45 -> NONTERM_StructAssign 
    | 46 -> NONTERM_StmtU 
    | 47 -> NONTERM_StmtU 
    | 48 -> NONTERM_ExprSeq 
    | 49 -> NONTERM_ExprSeq 
    | 50 -> NONTERM_Expr 
    | 51 -> NONTERM_Expr 
    | 52 -> NONTERM_Access 
    | 53 -> NONTERM_Access 
    | 54 -> NONTERM_Access 
    | 55 -> NONTERM_Access 
    | 56 -> NONTERM_Access 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_ExprNotAccess 
    | 65 -> NONTERM_ExprNotAccess 
    | 66 -> NONTERM_ExprNotAccess 
    | 67 -> NONTERM_ExprNotAccess 
    | 68 -> NONTERM_ExprNotAccess 
    | 69 -> NONTERM_ExprNotAccess 
    | 70 -> NONTERM_ExprNotAccess 
    | 71 -> NONTERM_ExprNotAccess 
    | 72 -> NONTERM_ExprNotAccess 
    | 73 -> NONTERM_ExprNotAccess 
    | 74 -> NONTERM_ExprNotAccess 
    | 75 -> NONTERM_ExprNotAccess 
    | 76 -> NONTERM_ExprNotAccess 
    | 77 -> NONTERM_AtExprNotAccess 
    | 78 -> NONTERM_AtExprNotAccess 
    | 79 -> NONTERM_AtExprNotAccess 
    | 80 -> NONTERM_AtExprNotAccess 
    | 81 -> NONTERM_AtExprNotAccess 
    | 82 -> NONTERM_AtExprNotAccess 
    | 83 -> NONTERM_Exprs 
    | 84 -> NONTERM_Exprs 
    | 85 -> NONTERM_Exprs1 
    | 86 -> NONTERM_Exprs1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 58 
let _fsyacc_tagOfErrorTerminal = 56

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LOCAL  -> "LOCAL" 
  | GLOBAL  -> "GLOBAL" 
  | EOF  -> "EOF" 
  | DEL  -> "DEL" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | DOT  -> "DOT" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | INC  -> "INC" 
  | DEC  -> "DEC" 
  | ON  -> "ON" 
  | PRESERVE  -> "PRESERVE" 
  | STRUCT  -> "STRUCT" 
  | RETURN  -> "RETURN" 
  | PRINT  -> "PRINT" 
  | CHAR  -> "CHAR" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | BREAK  -> "BREAK" 
  | DO  -> "DO" 
  | WHILE  -> "WHILE" 
  | LOCK  -> "LOCK" 
  | UNLOCK  -> "UNLOCK" 
  | FOR  -> "FOR" 
  | IN  -> "IN" 
  | WAIT  -> "WAIT" 
  | WHEN  -> "WHEN" 
  | THEN  -> "THEN" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTBOOL _ -> "CSTBOOL" 
  | CSTFLOAT _ -> "CSTFLOAT" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LOCAL  -> (null : System.Object) 
  | GLOBAL  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | DEL  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | INC  -> (null : System.Object) 
  | DEC  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | PRESERVE  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | LOCK  -> (null : System.Object) 
  | UNLOCK  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | WAIT  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTFLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 8us; 65535us; 0us; 9us; 4us; 9us; 12us; 8us; 13us; 8us; 33us; 8us; 37us; 8us; 40us; 8us; 74us; 8us; 8us; 65535us; 0us; 16us; 4us; 16us; 12us; 14us; 13us; 14us; 33us; 16us; 37us; 16us; 40us; 16us; 74us; 16us; 6us; 65535us; 0us; 19us; 4us; 19us; 33us; 36us; 37us; 36us; 40us; 36us; 74us; 36us; 2us; 65535us; 0us; 4us; 4us; 4us; 2us; 65535us; 0us; 21us; 4us; 21us; 1us; 65535us; 25us; 26us; 2us; 65535us; 25us; 29us; 31us; 32us; 12us; 65535us; 27us; 28us; 33us; 53us; 37us; 53us; 40us; 53us; 48us; 53us; 49us; 53us; 54us; 55us; 63us; 64us; 78us; 79us; 85us; 86us; 92us; 93us; 95us; 96us; 4us; 65535us; 33us; 39us; 37us; 39us; 40us; 39us; 74us; 80us; 3us; 65535us; 33us; 34us; 37us; 38us; 40us; 41us; 4us; 65535us; 33us; 37us; 37us; 37us; 40us; 37us; 48us; 121us; 5us; 65535us; 33us; 42us; 37us; 42us; 40us; 42us; 48us; 43us; 49us; 50us; 6us; 65535us; 33us; 106us; 37us; 106us; 40us; 106us; 48us; 106us; 49us; 106us; 83us; 84us; 5us; 65535us; 33us; 108us; 37us; 108us; 40us; 108us; 48us; 108us; 49us; 108us; 5us; 65535us; 33us; 44us; 37us; 44us; 40us; 44us; 48us; 44us; 49us; 120us; 3us; 65535us; 0us; 22us; 4us; 22us; 123us; 124us; 38us; 65535us; 0us; 122us; 4us; 122us; 17us; 18us; 33us; 109us; 37us; 109us; 40us; 109us; 46us; 47us; 48us; 109us; 49us; 109us; 57us; 58us; 61us; 62us; 67us; 68us; 81us; 82us; 87us; 88us; 90us; 91us; 94us; 95us; 99us; 100us; 103us; 104us; 113us; 114us; 117us; 118us; 123us; 122us; 138us; 139us; 142us; 164us; 149us; 150us; 165us; 151us; 166us; 152us; 167us; 153us; 168us; 154us; 169us; 155us; 170us; 156us; 171us; 157us; 172us; 158us; 173us; 159us; 174us; 160us; 175us; 161us; 176us; 162us; 177us; 163us; 187us; 164us; 43us; 65535us; 0us; 125us; 4us; 125us; 13us; 134us; 17us; 125us; 33us; 125us; 37us; 125us; 40us; 125us; 46us; 125us; 48us; 125us; 49us; 125us; 57us; 125us; 61us; 125us; 67us; 125us; 81us; 125us; 87us; 125us; 90us; 125us; 94us; 125us; 99us; 125us; 103us; 125us; 113us; 125us; 117us; 125us; 123us; 125us; 132us; 134us; 133us; 134us; 138us; 125us; 142us; 125us; 145us; 136us; 147us; 137us; 149us; 125us; 165us; 125us; 166us; 125us; 167us; 125us; 168us; 125us; 169us; 125us; 170us; 125us; 171us; 125us; 172us; 125us; 173us; 125us; 174us; 125us; 175us; 125us; 176us; 125us; 177us; 125us; 187us; 125us; 38us; 65535us; 0us; 126us; 4us; 126us; 17us; 126us; 33us; 126us; 37us; 126us; 40us; 126us; 46us; 126us; 48us; 126us; 49us; 126us; 57us; 126us; 61us; 126us; 67us; 126us; 81us; 126us; 87us; 126us; 90us; 126us; 94us; 126us; 99us; 126us; 103us; 126us; 113us; 126us; 117us; 126us; 123us; 126us; 138us; 126us; 142us; 126us; 149us; 126us; 165us; 126us; 166us; 126us; 167us; 126us; 168us; 126us; 169us; 126us; 170us; 126us; 171us; 126us; 172us; 126us; 173us; 126us; 174us; 126us; 175us; 126us; 176us; 126us; 177us; 126us; 187us; 126us; 40us; 65535us; 0us; 141us; 4us; 141us; 13us; 184us; 17us; 141us; 33us; 141us; 37us; 141us; 40us; 141us; 46us; 141us; 48us; 141us; 49us; 141us; 57us; 141us; 61us; 141us; 67us; 141us; 81us; 141us; 87us; 141us; 90us; 141us; 94us; 141us; 99us; 141us; 103us; 141us; 113us; 141us; 117us; 141us; 123us; 141us; 133us; 184us; 138us; 141us; 142us; 141us; 149us; 141us; 165us; 141us; 166us; 141us; 167us; 141us; 168us; 141us; 169us; 141us; 170us; 141us; 171us; 141us; 172us; 141us; 173us; 141us; 174us; 141us; 175us; 141us; 176us; 141us; 177us; 141us; 187us; 141us; 1us; 65535us; 142us; 143us; 2us; 65535us; 142us; 186us; 187us; 188us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 15us; 24us; 31us; 34us; 37us; 39us; 42us; 55us; 60us; 64us; 69us; 75us; 82us; 88us; 94us; 98us; 137us; 181us; 220us; 261us; 263us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 5us; 1us; 6us; 1us; 7us; 2us; 7us; 13us; 1us; 7us; 1us; 7us; 1us; 8us; 3us; 8us; 55us; 82us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 14us; 9us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 3us; 23us; 25us; 46us; 1us; 24us; 3us; 25us; 46us; 47us; 3us; 25us; 46us; 47us; 16us; 25us; 46us; 47us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 3us; 25us; 46us; 47us; 2us; 25us; 46us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 14us; 28us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 28us; 1us; 28us; 1us; 29us; 14us; 29us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 14us; 30us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 2us; 32us; 33us; 2us; 32us; 33us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 14us; 33us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 14us; 34us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 34us; 1us; 35us; 14us; 35us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 35us; 1us; 35us; 1us; 36us; 14us; 36us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 36us; 1us; 37us; 1us; 37us; 2us; 38us; 39us; 14us; 38us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 38us; 1us; 39us; 1us; 40us; 14us; 40us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 42us; 14us; 43us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 43us; 1us; 44us; 6us; 44us; 45us; 52us; 53us; 54us; 58us; 1us; 44us; 14us; 44us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 2us; 45us; 52us; 2us; 45us; 52us; 1us; 45us; 14us; 45us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 45us; 1us; 46us; 1us; 47us; 14us; 49us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 49us; 1us; 49us; 4us; 50us; 56us; 60us; 62us; 1us; 51us; 3us; 52us; 53us; 54us; 4us; 52us; 53us; 54us; 58us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 55us; 2us; 55us; 82us; 2us; 55us; 56us; 1us; 55us; 2us; 56us; 59us; 2us; 56us; 61us; 1us; 56us; 14us; 56us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 14us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 71us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 72us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 73us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 74us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 75us; 76us; 14us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 76us; 15us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 85us; 86us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 78us; 1us; 79us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 82us; 1us; 84us; 1us; 86us; 1us; 86us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 21us; 23us; 25us; 27us; 31us; 33us; 35us; 37us; 39us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 107us; 109us; 113us; 117us; 134us; 138us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 172us; 174us; 176us; 178us; 193us; 195us; 197us; 199us; 201us; 203us; 218us; 220us; 222us; 224us; 226us; 229us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 261us; 263us; 265us; 267us; 269us; 271us; 286us; 288us; 290us; 305us; 307us; 309us; 311us; 326us; 328us; 330us; 332us; 335us; 350us; 352us; 354us; 356us; 371us; 373us; 375us; 377us; 379us; 394us; 396us; 398us; 405us; 407us; 422us; 425us; 428us; 430us; 445us; 447us; 449us; 451us; 466us; 468us; 470us; 475us; 477us; 481us; 486us; 488us; 490us; 492us; 494us; 497us; 500us; 502us; 505us; 508us; 510us; 525us; 527us; 529us; 531us; 533us; 535us; 537us; 539us; 541us; 543us; 545us; 560us; 575us; 590us; 605us; 620us; 635us; 650us; 665us; 680us; 695us; 710us; 725us; 740us; 755us; 771us; 773us; 775us; 777us; 779us; 781us; 783us; 785us; 787us; 789us; 791us; 793us; 795us; 797us; 799us; 801us; 803us; 805us; 807us; 809us; 811us; 813us; 815us; 817us; |]
let _fsyacc_action_rows = 189
let _fsyacc_actionTableElements = [|14us; 16386us; 0us; 6us; 1us; 7us; 4us; 13us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 49us; 16388us; 50us; 16388us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 49152us; 1us; 32768us; 2us; 3us; 0us; 16385us; 14us; 16386us; 0us; 6us; 1us; 7us; 4us; 13us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 49us; 16388us; 50us; 16388us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 16387us; 0us; 16389us; 0us; 16390us; 1us; 32768us; 49us; 10us; 2us; 32768us; 49us; 10us; 50us; 23us; 1us; 32768us; 52us; 11us; 0us; 16391us; 3us; 16388us; 0us; 6us; 1us; 7us; 4us; 12us; 9us; 16388us; 0us; 6us; 1us; 7us; 4us; 13us; 25us; 179us; 51us; 183us; 52us; 127us; 53us; 182us; 54us; 181us; 55us; 178us; 1us; 32768us; 5us; 15us; 0us; 16392us; 1us; 32768us; 12us; 17us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 13us; 16393us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 1us; 32768us; 10us; 20us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 52us; 24us; 1us; 32768us; 4us; 25us; 1us; 16398us; 52us; 30us; 1us; 32768us; 5us; 27us; 1us; 32768us; 6us; 33us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 11us; 31us; 1us; 32768us; 52us; 30us; 0us; 16401us; 27us; 16388us; 0us; 6us; 1us; 7us; 4us; 13us; 6us; 33us; 7us; 16404us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 31us; 94us; 32us; 97us; 34us; 99us; 35us; 103us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 65us; 43us; 70us; 44us; 73us; 46us; 87us; 47us; 90us; 51us; 183us; 52us; 112us; 53us; 182us; 54us; 181us; 55us; 178us; 1us; 32768us; 7us; 35us; 0us; 16402us; 0us; 16403us; 27us; 16388us; 0us; 6us; 1us; 7us; 4us; 13us; 6us; 33us; 7us; 16404us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 31us; 94us; 32us; 97us; 34us; 99us; 35us; 103us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 65us; 43us; 70us; 44us; 73us; 46us; 87us; 47us; 90us; 51us; 183us; 52us; 112us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 16405us; 1us; 32768us; 10us; 40us; 27us; 16388us; 0us; 6us; 1us; 7us; 4us; 13us; 6us; 33us; 7us; 16404us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 31us; 94us; 32us; 97us; 34us; 99us; 35us; 103us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 65us; 43us; 70us; 44us; 73us; 46us; 87us; 47us; 90us; 51us; 183us; 52us; 112us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 16406us; 0us; 16407us; 1us; 16407us; 38us; 49us; 0us; 16408us; 1us; 32768us; 4us; 46us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 5us; 48us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 24us; 32768us; 4us; 133us; 6us; 33us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 31us; 94us; 32us; 97us; 34us; 99us; 35us; 103us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 65us; 43us; 70us; 44us; 73us; 46us; 87us; 47us; 90us; 51us; 183us; 52us; 112us; 53us; 182us; 54us; 181us; 55us; 178us; 24us; 32768us; 4us; 133us; 6us; 33us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 31us; 94us; 32us; 97us; 34us; 99us; 35us; 103us; 37us; 45us; 39us; 51us; 40us; 54us; 41us; 61us; 42us; 65us; 43us; 70us; 44us; 73us; 46us; 87us; 47us; 90us; 51us; 183us; 52us; 112us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 16409us; 1us; 32768us; 10us; 52us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 6us; 33us; 1us; 32768us; 41us; 56us; 1us; 32768us; 4us; 57us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 5us; 59us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 1us; 32768us; 10us; 60us; 0us; 16412us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 40us; 63us; 1us; 32768us; 6us; 33us; 0us; 16413us; 1us; 32768us; 52us; 66us; 1us; 32768us; 12us; 67us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 10us; 69us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16414us; 1us; 32768us; 52us; 71us; 1us; 32768us; 10us; 72us; 0us; 16415us; 1us; 32768us; 4us; 74us; 4us; 16388us; 0us; 6us; 1us; 7us; 4us; 12us; 52us; 75us; 1us; 32768us; 45us; 76us; 1us; 32768us; 52us; 77us; 1us; 32768us; 5us; 78us; 1us; 32768us; 6us; 33us; 0us; 16416us; 1us; 32768us; 10us; 81us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 10us; 83us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 1us; 32768us; 52us; 111us; 1us; 32768us; 5us; 85us; 1us; 32768us; 6us; 33us; 0us; 16417us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 10us; 89us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16418us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 48us; 92us; 1us; 32768us; 6us; 33us; 0us; 16419us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 6us; 33us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16420us; 1us; 32768us; 10us; 98us; 0us; 16421us; 11us; 32768us; 4us; 133us; 10us; 102us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 10us; 101us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16422us; 0us; 16423us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 10us; 105us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16424us; 1us; 32768us; 10us; 107us; 0us; 16425us; 0us; 16426us; 14us; 32768us; 10us; 110us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16427us; 1us; 32768us; 12us; 113us; 4us; 16438us; 3us; 131us; 4us; 142us; 12us; 113us; 14us; 115us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 13us; 16428us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 1us; 32768us; 52us; 116us; 1us; 16436us; 12us; 117us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 10us; 119us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 14us; 32768us; 10us; 123us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 10us; 16432us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 16433us; 3us; 16434us; 8us; 138us; 29us; 146us; 30us; 148us; 0us; 16435us; 2us; 16438us; 3us; 131us; 14us; 129us; 3us; 16438us; 3us; 131us; 4us; 142us; 14us; 129us; 1us; 32768us; 52us; 130us; 0us; 16436us; 0us; 16437us; 2us; 32768us; 4us; 132us; 52us; 127us; 7us; 32768us; 4us; 133us; 25us; 179us; 51us; 183us; 52us; 127us; 53us; 182us; 54us; 181us; 55us; 178us; 2us; 32768us; 5us; 135us; 8us; 138us; 0us; 16439us; 1us; 16443us; 8us; 138us; 1us; 16445us; 8us; 138us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 14us; 32768us; 9us; 140us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16440us; 0us; 16441us; 10us; 16467us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 1us; 32768us; 5us; 144us; 0us; 16442us; 2us; 32768us; 4us; 132us; 52us; 127us; 0us; 16444us; 2us; 32768us; 4us; 132us; 52us; 127us; 0us; 16446us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 16447us; 3us; 16448us; 26us; 167us; 27us; 168us; 28us; 169us; 3us; 16449us; 26us; 167us; 27us; 168us; 28us; 169us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 9us; 16453us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 9us; 16454us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 9us; 16455us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 9us; 16456us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 9us; 16457us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 9us; 16458us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 11us; 16459us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 12us; 16460us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 14us; 16469us; 11us; 187us; 16us; 177us; 17us; 176us; 18us; 170us; 19us; 171us; 20us; 172us; 21us; 173us; 22us; 174us; 23us; 175us; 24us; 165us; 25us; 166us; 26us; 167us; 27us; 168us; 28us; 169us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 16461us; 1us; 32768us; 55us; 180us; 0us; 16462us; 0us; 16463us; 0us; 16464us; 0us; 16465us; 1us; 32768us; 5us; 185us; 0us; 16466us; 0us; 16468us; 10us; 32768us; 4us; 133us; 15us; 149us; 25us; 179us; 29us; 145us; 30us; 147us; 51us; 183us; 52us; 128us; 53us; 182us; 54us; 181us; 55us; 178us; 0us; 16470us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 15us; 16us; 18us; 19us; 34us; 35us; 36us; 37us; 39us; 42us; 44us; 45us; 49us; 59us; 61us; 62us; 64us; 75us; 89us; 91us; 92us; 93us; 94us; 96us; 98us; 100us; 102us; 104us; 105us; 106us; 108us; 110us; 111us; 139us; 141us; 142us; 143us; 171us; 172us; 174us; 202us; 203us; 204us; 206us; 207us; 209us; 220us; 235us; 260us; 285us; 286us; 288us; 289us; 290us; 292us; 294us; 296us; 307us; 322us; 324us; 325us; 336us; 351us; 353us; 354us; 356us; 358us; 369us; 384us; 385us; 387us; 389us; 390us; 392us; 397us; 399us; 401us; 403us; 405us; 406us; 408us; 419us; 434us; 436us; 438us; 440us; 441us; 452us; 467us; 468us; 479us; 494us; 496us; 497us; 508us; 523us; 524us; 526us; 527us; 539us; 554us; 555us; 556us; 567us; 582us; 583us; 585us; 586us; 587us; 602us; 603us; 605us; 610us; 621us; 635us; 637us; 639us; 650us; 665us; 666us; 667us; 668us; 683us; 694us; 695us; 699us; 700us; 703us; 707us; 709us; 710us; 711us; 714us; 722us; 725us; 726us; 728us; 730us; 741us; 756us; 757us; 758us; 769us; 771us; 772us; 775us; 776us; 779us; 780us; 791us; 792us; 796us; 800us; 801us; 802us; 803us; 813us; 823us; 833us; 843us; 853us; 863us; 875us; 888us; 903us; 914us; 925us; 936us; 947us; 958us; 969us; 980us; 991us; 1002us; 1013us; 1024us; 1035us; 1046us; 1047us; 1049us; 1050us; 1051us; 1052us; 1053us; 1055us; 1056us; 1057us; 1068us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 0us; 1us; 1us; 3us; 3us; 3us; 2us; 1us; 1us; 7us; 0us; 1us; 1us; 3us; 3us; 1us; 0us; 2us; 3us; 1us; 1us; 7us; 2us; 1us; 7us; 4us; 5us; 3us; 7us; 9us; 3us; 4us; 3us; 2us; 3us; 2us; 3us; 2us; 1us; 2us; 3us; 6us; 7us; 5us; 0us; 3us; 1us; 1us; 3us; 2us; 1us; 3us; 4us; 1us; 4us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 2us; 1us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 6us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 24us; 24us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 16389us; 16390us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 16394us; 16395us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 16403us; 65535us; 16405us; 65535us; 65535us; 16406us; 16407us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 16419us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 65535us; 16422us; 16423us; 65535us; 65535us; 16424us; 65535us; 16425us; 16426us; 65535us; 16427us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16429us; 16430us; 16431us; 65535us; 65535us; 16433us; 65535us; 16435us; 65535us; 65535us; 65535us; 16436us; 16437us; 65535us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 65535us; 16440us; 16441us; 65535us; 65535us; 16442us; 65535us; 16444us; 65535us; 16446us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16461us; 65535us; 16462us; 16463us; 16464us; 16465us; 65535us; 16466us; 16468us; 65535us; 16470us; |]
let _fsyacc_reductions ()  =    [| 
# 514 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 523 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "TransPar.fsy"
                                                                       Prog _1 
                   )
# 47 "TransPar.fsy"
                 : Absyn.program));
# 534 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "TransPar.fsy"
                                                                 [] 
                   )
# 51 "TransPar.fsy"
                 : 'Topdecs));
# 544 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "TransPar.fsy"
                                                                 _1 :: _2 
                   )
# 52 "TransPar.fsy"
                 : 'Topdecs));
# 556 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "TransPar.fsy"
                                                                       Local 
                   )
# 56 "TransPar.fsy"
                 : 'Proximity));
# 566 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "TransPar.fsy"
                                                                       Local 
                   )
# 57 "TransPar.fsy"
                 : 'Proximity));
# 576 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "TransPar.fsy"
                                                                       Global 
                   )
# 58 "TransPar.fsy"
                 : 'Proximity));
# 586 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Proximity)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "TransPar.fsy"
                                                                       (_1, _3) 
                   )
# 62 "TransPar.fsy"
                 : 'Vardec));
# 598 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "TransPar.fsy"
                                                                       _2 
                   )
# 63 "TransPar.fsy"
                 : 'Vardec));
# 609 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "TransPar.fsy"
                                                                       (_1,_3) 
                   )
# 67 "TransPar.fsy"
                 : 'Vardesc));
# 621 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "TransPar.fsy"
                                                                       Vardec (ll _1, lr _1, snd _1) 
                   )
# 71 "TransPar.fsy"
                 : 'Topdec));
# 632 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "TransPar.fsy"
                                                               _1 
                   )
# 72 "TransPar.fsy"
                 : 'Topdec));
# 643 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "TransPar.fsy"
                                                                       ExprSeq(_1) 
                   )
# 73 "TransPar.fsy"
                 : 'Topdec));
# 654 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Proximity)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "TransPar.fsy"
                                                                       Fundec(_1,_3,_5,_7) 
                   )
# 77 "TransPar.fsy"
                 : 'Fundec));
# 668 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "TransPar.fsy"
                                                                  [] 
                   )
# 81 "TransPar.fsy"
                 : 'Params));
# 678 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "TransPar.fsy"
                                                                _1 
                   )
# 82 "TransPar.fsy"
                 : 'Params));
# 689 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "TransPar.fsy"
                                                               [_1] 
                   )
# 86 "TransPar.fsy"
                 : 'Params1));
# 700 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "TransPar.fsy"
                                                                  _1 :: _3 
                   )
# 87 "TransPar.fsy"
                 : 'Params1));
# 712 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "TransPar.fsy"
                                                                     Block _2 
                   )
# 91 "TransPar.fsy"
                 : 'Block));
# 723 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "TransPar.fsy"
                                                                       Dec(ll _1, lr _1, snd _1) 
                   )
# 95 "TransPar.fsy"
                 : 'Dec));
# 734 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "TransPar.fsy"
                                                                  [] 
                   )
# 99 "TransPar.fsy"
                 : 'StmtSeq));
# 744 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "TransPar.fsy"
                                                                 Stmt _1 :: _2 
                   )
# 100 "TransPar.fsy"
                 : 'StmtSeq));
# 756 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "TransPar.fsy"
                                                                       (_1)::_3 
                   )
# 101 "TransPar.fsy"
                 : 'StmtSeq));
# 768 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "TransPar.fsy"
                                                                       _1 
                   )
# 105 "TransPar.fsy"
                 : 'Stmt));
# 779 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "TransPar.fsy"
                                                                       _1 
                   )
# 106 "TransPar.fsy"
                 : 'Stmt));
# 790 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "TransPar.fsy"
                                                                       If(_3, _5, _7) 
                   )
# 110 "TransPar.fsy"
                 : 'StmtM));
# 803 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "TransPar.fsy"
                                                                Break 
                   )
# 111 "TransPar.fsy"
                 : 'StmtM));
# 813 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "TransPar.fsy"
                                                                _1 
                   )
# 112 "TransPar.fsy"
                 : 'StmtM));
# 824 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "TransPar.fsy"
                                                                       DoWhile(_2, _5) 
                   )
# 113 "TransPar.fsy"
                 : 'StmtM));
# 836 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "TransPar.fsy"
                                                                   While(_2, _4) 
                   )
# 114 "TransPar.fsy"
                 : 'StmtM));
# 848 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "TransPar.fsy"
                                                                    Lock(_2, _4) 
                   )
# 115 "TransPar.fsy"
                 : 'StmtM));
# 860 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "TransPar.fsy"
                                                                  Unlock(_2) 
                   )
# 116 "TransPar.fsy"
                 : 'StmtM));
# 871 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "TransPar.fsy"
                                                                      ForIn(_3, _5, _7) 
                   )
# 117 "TransPar.fsy"
                 : 'StmtM));
# 884 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dec)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarAssign)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "TransPar.fsy"
                                                                            For(_3, _5, _7, _9) 
                   )
# 118 "TransPar.fsy"
                 : 'StmtM));
# 898 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "TransPar.fsy"
                                                                 Wait(_2) 
                   )
# 119 "TransPar.fsy"
                 : 'StmtM));
# 909 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "TransPar.fsy"
                                                                   WhenThen(_2, _4) 
                   )
# 120 "TransPar.fsy"
                 : 'StmtM));
# 921 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "TransPar.fsy"
                                                                  On(_2, _3) 
                   )
# 121 "TransPar.fsy"
                 : 'StmtM));
# 933 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "TransPar.fsy"
                                                                  Preserve 
                   )
# 122 "TransPar.fsy"
                 : 'StmtM));
# 943 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "TransPar.fsy"
                                                                  Return(Some(_2)) 
                   )
# 123 "TransPar.fsy"
                 : 'StmtM));
# 954 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "TransPar.fsy"
                                                                 Return None 
                   )
# 124 "TransPar.fsy"
                 : 'StmtM));
# 964 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "TransPar.fsy"
                                                                  Print _2 
                   )
# 125 "TransPar.fsy"
                 : 'StmtM));
# 975 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarAssign)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "TransPar.fsy"
                                                                   _1 
                   )
# 126 "TransPar.fsy"
                 : 'StmtM));
# 986 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StructAssign)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "TransPar.fsy"
                                                                       _1 
                   )
# 127 "TransPar.fsy"
                 : 'StmtM));
# 997 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "TransPar.fsy"
                                                                 Expr(_1) 
                   )
# 128 "TransPar.fsy"
                 : 'StmtM));
# 1008 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "TransPar.fsy"
                                                                       AssignVar(_1, _3) 
                   )
# 132 "TransPar.fsy"
                 : 'VarAssign));
# 1020 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "TransPar.fsy"
                                                                       AssignMember(_1, _3, _5) 
                   )
# 136 "TransPar.fsy"
                 : 'StructAssign));
# 1033 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "TransPar.fsy"
                                                                       If(_3, _5, _7) 
                   )
# 140 "TransPar.fsy"
                 : 'StmtU));
# 1046 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "TransPar.fsy"
                                                                    If(_3, _5, Block []) 
                   )
# 141 "TransPar.fsy"
                 : 'StmtU));
# 1058 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "TransPar.fsy"
                                                                       [] 
                   )
# 145 "TransPar.fsy"
                 : 'ExprSeq));
# 1068 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "TransPar.fsy"
                                                                       _1::_3 
                   )
# 146 "TransPar.fsy"
                 : 'ExprSeq));
# 1080 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "TransPar.fsy"
                                                                Access(_1) 
                   )
# 150 "TransPar.fsy"
                 : 'Expr));
# 1091 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "TransPar.fsy"
                                                                   _1 
                   )
# 151 "TransPar.fsy"
                 : 'Expr));
# 1102 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "TransPar.fsy"
                                                                   AccMem(_1, _3) 
                   )
# 155 "TransPar.fsy"
                 : 'Access));
# 1114 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "TransPar.fsy"
                                                                 AccFun(_1) 
                   )
# 156 "TransPar.fsy"
                 : 'Access));
# 1125 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "TransPar.fsy"
                                                                      AccVar(_1) 
                   )
# 157 "TransPar.fsy"
                 : 'Access));
# 1136 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "TransPar.fsy"
                                                                       _2 
                   )
# 158 "TransPar.fsy"
                 : 'Access));
# 1147 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "TransPar.fsy"
                                                                   AccIndex(_1, _3) 
                   )
# 159 "TransPar.fsy"
                 : 'Access));
# 1159 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "TransPar.fsy"
                                                                       _1 
                   )
# 163 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1170 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "TransPar.fsy"
                                                                       Call(_1, _3) 
                   )
# 164 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1182 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "TransPar.fsy"
                                                                       PreInc(_2) 
                   )
# 165 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1193 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "TransPar.fsy"
                                                                       PostInc(_1) 
                   )
# 166 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1204 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "TransPar.fsy"
                                                                       PreDec(_2) 
                   )
# 167 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1215 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "TransPar.fsy"
                                                                       PostDec(_1) 
                   )
# 168 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1226 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "TransPar.fsy"
                                                                       Prim1("!", _2) 
                   )
# 169 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1237 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "TransPar.fsy"
                                                                       Prim2("+",  _1, _3) 
                   )
# 170 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1249 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "TransPar.fsy"
                                                                       Prim2("-",  _1, _3) 
                   )
# 171 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1261 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "TransPar.fsy"
                                                                       Prim2("*",  _1, _3) 
                   )
# 172 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1273 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "TransPar.fsy"
                                                                       Prim2("/",  _1, _3) 
                   )
# 173 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1285 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "TransPar.fsy"
                                                                       Prim2("%",  _1, _3) 
                   )
# 174 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1297 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "TransPar.fsy"
                                                                       Prim2("==", _1, _3) 
                   )
# 175 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1309 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "TransPar.fsy"
                                                                       Prim2("!=", _1, _3) 
                   )
# 176 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1321 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "TransPar.fsy"
                                                                       Prim2(">",  _1, _3) 
                   )
# 177 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1333 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "TransPar.fsy"
                                                                       Prim2("<",  _1, _3) 
                   )
# 178 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1345 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "TransPar.fsy"
                                                                       Prim2(">=", _1, _3) 
                   )
# 179 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1357 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "TransPar.fsy"
                                                                       Prim2("<=", _1, _3) 
                   )
# 180 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1369 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "TransPar.fsy"
                                                                       Andalso(_1, _3)     
                   )
# 181 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1381 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "TransPar.fsy"
                                                                       Orelse(_1, _3)      
                   )
# 182 "TransPar.fsy"
                 : 'ExprNotAccess));
# 1393 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "TransPar.fsy"
                                                                       CstN(float _1) 
                   )
# 186 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1404 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "TransPar.fsy"
                                                                       CstN(float (-_2)) 
                   )
# 187 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1415 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "TransPar.fsy"
                                                                       CstN(_1) 
                   )
# 188 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1426 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "TransPar.fsy"
                                                                       CstB(_1) 
                   )
# 189 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1437 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "TransPar.fsy"
                                                                       CstS(_1) 
                   )
# 190 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1448 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "TransPar.fsy"
                                                                       _2 
                   )
# 191 "TransPar.fsy"
                 : 'AtExprNotAccess));
# 1459 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "TransPar.fsy"
                                                                       []       
                   )
# 195 "TransPar.fsy"
                 : 'Exprs));
# 1469 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "TransPar.fsy"
                                                                       _1       
                   )
# 196 "TransPar.fsy"
                 : 'Exprs));
# 1480 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "TransPar.fsy"
                                                                       [_1]     
                   )
# 200 "TransPar.fsy"
                 : 'Exprs1));
# 1491 "TransPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "TransPar.fsy"
                                                                       _1 :: _3 
                   )
# 201 "TransPar.fsy"
                 : 'Exprs1));
|]
# 1504 "TransPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 59;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
