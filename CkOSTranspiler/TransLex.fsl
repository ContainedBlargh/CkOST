{
module TransLex

open Microsoft.FSharp.Text.Lexing
open TransPar

let lexemeAsString lexbuf =
    LexBuffer<char>.LexemeString lexbuf

let commentStart = ref Position.Empty;
let commentDepth = ref 0;

(* Distinguish keywords from identifiers *)
let keyword s =
    match s with
    | "if" -> IF
    | "else" -> ELSE
    | "break" -> BREAK
    | "do" -> DO
    | "while" -> WHILE
    | "lock" -> LOCK
    | "unlock" -> UNLOCK
    | "for" -> FOR
    | "in" -> IN
    | "wait" -> WAIT
    | "when" -> WHEN
    | "then" -> THEN
    | "var" -> VAR
    | "fun" -> FUN
    | "true" -> CSTBOOL true
    | "false" -> CSTBOOL false
    | "on" -> ON
    | "preserve" -> PRESERVE
    | "struct" -> STRUCT
    | "return" -> RETURN
    | "local" -> LOCAL
    | "global" -> GLOBAL
    | _ -> NAME s

let cEscape s = 
    match s with 
    | "\\\\" -> '\\'
    | "\\\"" -> '\"'
    | "\\a"  -> '\007'
    | "\\b"  -> '\008'
    | "\\t"  -> '\t'
    | "\\n"  -> '\n'
    | "\\v"  -> '\011'
    | "\\f"  -> '\012'
    | "\\r"  -> '\r'
    | _      -> failwith "Lexer error: impossible C escape"
}

rule Token = parse
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | [' ' '\t' '\r'] { Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }  
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | "++"            { INC }
  | "--"            { DEC }
  | '+'             { PLUS } 
  | '-'             { MINUS } 
  | '*'             { TIMES } 
  | '/'             { DIV } 
  | '%'             { MOD }
  | '='             { ASSIGN } 
  | "=="            { EQ } 
  | "!="            { NE }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | "||"            { SEQOR }
  | "&&"            { SEQAND }
  | "!"             { NOT }
  | '('             { LPAR }
  | ')'             { RPAR }
  | '{'             { LBRACE }
  | '}'             { RBRACE }
  | '['             { LBRACK }
  | ']'             { RBRACK }
  | ';'             { SEMI }
  | ','             { COMMA }
  | '.'				      { DOT }
  | '@'             { DEL }
  | "//"            { EndLineComment lexbuf; Token lexbuf }
  | "/*"            { Comment lexbuf; Token lexbuf }
  | '"'             { CSTSTRING (String [] lexbuf) }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }

and Comment = parse
| "/*"           { Comment lexbuf; Comment lexbuf }
| "*/"           { () }
| '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Comment lexbuf }
| (eof | '\026') { failwith "Lexer error: unterminated comment" }
| _              { Comment lexbuf }

and EndLineComment = parse
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine }
   | (eof | '\026') { () }
   | _              { EndLineComment lexbuf }

and String chars = parse 
  | '"'
      { Microsoft.FSharp.Core.String.concat "" (List.map string (List.rev chars)) }
  | '\\' ['\\' '"' 'a' 'b' 't' 'n' 'v' 'f' 'r']
      { String (cEscape (lexemeAsString lexbuf) :: chars) lexbuf }
  | "''" 
      { String ('\'' :: chars) lexbuf }
  | '\\'
      { failwith "Lexer error: illegal escape sequence" }
  | (eof | '\026')
      { failwith "Lexer error: unterminated string" }
  | ['\n' '\r']
      { failwith "Lexer error: newline in string" }
  | ['\000'-'\031' '\127' '\255']
      { failwith "Lexer error: invalid character in string" }
  | _
      { String (char (lexbuf.LexemeChar 0) :: chars) lexbuf }